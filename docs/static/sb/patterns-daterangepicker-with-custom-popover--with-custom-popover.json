{
  "args": {},
  "componentId": "patterns-daterangepicker-with-custom-popover",
  "title": "Patterns/DateRangePicker/With Custom Popover",
  "kind": "Patterns/DateRangePicker/With Custom Popover",
  "id": "patterns-daterangepicker-with-custom-popover--with-custom-popover",
  "name": "With Custom Popover",
  "story": "With Custom Popover",
  "subcomponents": {
    "InputMask": {
      "displayName": "InputMask",
      "utils": {},
      "__docgenInfo": {
        "description": "",
        "displayName": "InputMask",
        "props": {
          "name": {
            "defaultValue": null,
            "description": "Name of the `Input`",
            "name": "name",
            "required": false,
            "type": {
              "name": "string | undefined"
            }
          },
          "type": {
            "defaultValue": null,
            "description": "Type of text inside `Input`",
            "name": "type",
            "required": false,
            "type": {
              "name": "enum",
              "value": [
                {
                  "value": "undefined"
                },
                {
                  "value": "\"number\""
                },
                {
                  "value": "\"text\""
                },
                {
                  "value": "\"tel\""
                },
                {
                  "value": "\"url\""
                },
                {
                  "value": "\"email\""
                },
                {
                  "value": "\"password\""
                }
              ]
            }
          },
          "value": {
            "defaultValue": null,
            "description": "Value of the `Input` (Used in case of controlled `Input`)",
            "name": "value",
            "required": false,
            "type": {
              "name": "string | undefined"
            }
          },
          "defaultValue": {
            "defaultValue": null,
            "description": "Adds default value to `Input` (Used in case of uncontrolled `Input`)",
            "name": "defaultValue",
            "required": false,
            "type": {
              "name": "string | undefined"
            }
          },
          "placeholder": {
            "defaultValue": null,
            "description": "Text to display when input is empty.\nIncase a label is missing, a placeholder should be provided to make it accessible for all user.",
            "name": "placeholder",
            "required": false,
            "type": {
              "name": "string | undefined"
            }
          },
          "size": {
            "defaultValue": null,
            "description": "Size of the `Input`",
            "name": "size",
            "required": false,
            "type": {
              "name": "enum",
              "value": [
                {
                  "value": "undefined"
                },
                {
                  "value": "\"regular\""
                },
                {
                  "value": "\"tiny\""
                },
                {
                  "value": "\"large\""
                }
              ]
            }
          },
          "icon": {
            "defaultValue": null,
            "description": "Material icon name",
            "name": "icon",
            "required": false,
            "type": {
              "name": "string | undefined"
            }
          },
          "iconType": {
            "defaultValue": null,
            "description": "Set type of Icon",
            "name": "iconType",
            "required": false,
            "type": {
              "name": "enum",
              "value": [
                {
                  "value": "undefined"
                },
                {
                  "value": "\"rounded\""
                },
                {
                  "value": "\"outlined\""
                }
              ]
            }
          },
          "inlineLabel": {
            "defaultValue": null,
            "description": "Label to be displayed inside `Input`",
            "name": "inlineLabel",
            "required": false,
            "type": {
              "name": "string | undefined"
            }
          },
          "disabled": {
            "defaultValue": null,
            "description": "Disables the `Input`, making it unable to type",
            "name": "disabled",
            "required": false,
            "type": {
              "name": "boolean | undefined"
            }
          },
          "required": {
            "defaultValue": null,
            "description": "Shows the user that this field id required",
            "name": "required",
            "required": false,
            "type": {
              "name": "boolean | undefined"
            }
          },
          "autoFocus": {
            "defaultValue": null,
            "description": "Adds autoFocus",
            "name": "autoFocus",
            "required": false,
            "type": {
              "name": "boolean | undefined"
            }
          },
          "autoComplete": {
            "defaultValue": null,
            "description": "Specifies whether `input field should have autocomplete enabled",
            "name": "autoComplete",
            "required": false,
            "type": {
              "name": "enum",
              "value": [
                {
                  "value": "undefined"
                },
                {
                  "value": "\"on\""
                },
                {
                  "value": "\"off\""
                }
              ]
            }
          },
          "readOnly": {
            "defaultValue": null,
            "description": "Disables the `Input`, making it unable to type",
            "name": "readOnly",
            "required": false,
            "type": {
              "name": "boolean | undefined"
            }
          },
          "min": {
            "defaultValue": null,
            "description": "Valid for number it defines the most negative value in the range of permitted values.",
            "name": "min",
            "required": false,
            "type": {
              "name": "number | undefined"
            }
          },
          "max": {
            "defaultValue": null,
            "description": "Valid for text, url, tel, email, and password, it defines the maximum number of characters\n(as UTF-16 code units) the user can enter into the field.",
            "name": "max",
            "required": false,
            "type": {
              "name": "number | undefined"
            }
          },
          "minLength": {
            "defaultValue": null,
            "description": "Valid for text, url, tel, email, and password, it defines the minimum number of characters\n(as UTF-16 code units) the user can enter into the entry field.",
            "name": "minLength",
            "required": false,
            "type": {
              "name": "number | undefined"
            }
          },
          "maxLength": {
            "defaultValue": null,
            "description": "Valid for text, url, tel, email, and password, it defines the maximum number of characters\n(as UTF-16 code units) the user can enter into the field.",
            "name": "maxLength",
            "required": false,
            "type": {
              "name": "number | undefined"
            }
          },
          "pattern": {
            "defaultValue": null,
            "description": "The pattern attribute, when specified, is a regular expression that the input's value\nmust match in order for the value to pass constraint validation.",
            "name": "pattern",
            "required": false,
            "type": {
              "name": "string | undefined"
            }
          },
          "error": {
            "defaultValue": null,
            "description": "Shows error state in case of failed validation",
            "name": "error",
            "required": false,
            "type": {
              "name": "boolean | undefined"
            }
          },
          "info": {
            "defaultValue": null,
            "description": "Text to be rendered in info `Popover`",
            "name": "info",
            "required": false,
            "type": {
              "name": "string | undefined"
            }
          },
          "minWidth": {
            "defaultValue": null,
            "description": "minimum width of `Input` component\n\n**No default value for `type='number'`**",
            "name": "minWidth",
            "required": false,
            "type": {
              "name": "string | undefined"
            }
          },
          "onClear": {
            "defaultValue": null,
            "description": "Callback function when user clicks the clear button",
            "name": "onClear",
            "required": false,
            "type": {
              "name": "(((e: MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent<HTMLElement>) => void) & ((e: MouseEvent<HTMLElement, MouseEvent>) => void)) | undefined"
            }
          },
          "onChange": {
            "defaultValue": null,
            "description": "Callback function when `Input` text changes\n<br/>**Second argument will be the masked value**",
            "name": "onChange",
            "required": false,
            "type": {
              "name": "(((e: ChangeEvent<HTMLInputElement>) => void) & ((e: ChangeEvent<HTMLInputElement>, maskedVal: string) => void)) | undefined"
            }
          },
          "onClick": {
            "defaultValue": null,
            "description": "Handler to be called when `Input` is clicked",
            "name": "onClick",
            "required": false,
            "type": {
              "name": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
            }
          },
          "onBlur": {
            "defaultValue": null,
            "description": "Handler to be called when `Input` loses focus\n<br/>**Second argument will be the masked value**",
            "name": "onBlur",
            "required": false,
            "type": {
              "name": "(((e: FocusEvent<HTMLInputElement, Element>) => void) & ((e: ChangeEvent<HTMLInputElement>, maskedVal: string) => void)) | undefined"
            }
          },
          "onFocus": {
            "defaultValue": null,
            "description": "Handler to be called when `Input` gets focus",
            "name": "onFocus",
            "required": false,
            "type": {
              "name": "((e: FocusEvent<HTMLInputElement, Element>) => void) | undefined"
            }
          },
          "onPaste": {
            "defaultValue": null,
            "description": "Handler to be called when paste event occur inside `Input`",
            "name": "onPaste",
            "required": false,
            "type": {
              "name": "(((event: ClipboardEvent<HTMLInputElement>) => void) & ((e: ClipboardEvent<HTMLInputElement>, val?: string | undefined) => void)) | undefined"
            }
          },
          "actionIcon": {
            "defaultValue": null,
            "description": "Custom Icon Component to be passed to Input to replace Clear Icon in the right",
            "name": "actionIcon",
            "required": false,
            "type": {
              "name": "ReactElement<IconProps, string | ((props: any) => ReactElement<any, any> | null) | (new (props: any) => Component<any, any, any>)> | undefined"
            }
          },
          "className": {
            "defaultValue": null,
            "description": "Adds custom class",
            "name": "className",
            "required": false,
            "type": {
              "name": "string | undefined"
            }
          },
          "data-test": {
            "defaultValue": null,
            "description": "Stores custom testing data private to the component.",
            "name": "data-test",
            "required": false,
            "type": {
              "name": "string | undefined"
            }
          },
          "mask": {
            "defaultValue": null,
            "description": "Every value of Array represent either fixed char or regular expression for particular index\n\n<pre className=\"DocPage-codeBlock\">\nMask: (string | RegExp)[]\n</pre>",
            "name": "mask",
            "required": true,
            "type": {
              "name": "Mask"
            }
          },
          "placeholderChar": {
            "defaultValue": null,
            "description": "Character to be used for empty value at particular index in `Mask`",
            "name": "placeholderChar",
            "required": false,
            "type": {
              "name": "string | undefined"
            }
          },
          "caption": {
            "defaultValue": null,
            "description": "Adds caption to `input` on error",
            "name": "caption",
            "required": false,
            "type": {
              "name": "string | undefined"
            }
          },
          "validators": {
            "defaultValue": null,
            "description": "custom Validator for `InputMask`\n\n`ValidatorFn: (val: string) => boolean`",
            "name": "validators",
            "required": false,
            "type": {
              "name": "ValidatorFn<any[]> | ValidatorFn<any[]>[] | undefined"
            }
          },
          "clearOnEmptyBlur": {
            "defaultValue": null,
            "description": "Clear the `Input` on blur if value === defaultPlaceholderValue",
            "name": "clearOnEmptyBlur",
            "required": false,
            "type": {
              "name": "boolean | undefined"
            }
          },
          "helpText": {
            "defaultValue": null,
            "description": "Add text below `input`",
            "name": "helpText",
            "required": false,
            "type": {
              "name": "string | undefined"
            }
          }
        }
      }
    }
  },
  "parameters": {
    "docs": {
      "inlineStories": true,
      "theme": {
        "base": "light",
        "colorPrimary": "#0000001a",
        "colorSecondary": "deepskyblue",
        "appBg": "white",
        "appContentBg": "white",
        "appBorderColor": "#0000001a",
        "appBorderRadius": 4,
        "fontBase": "\"Nunito Sans\", \"Open Sans\", sans-serif",
        "fontCode": "monospace",
        "textColor": "black",
        "textInverseColor": "rgba(255,255,255,0.9)",
        "textMutedColor": "#666666",
        "barTextColor": "silver",
        "barSelectedColor": "black",
        "barBg": "white",
        "inputBg": "white",
        "inputBorder": "silver",
        "inputTextColor": "black",
        "inputBorderRadius": 4,
        "brandTitle": "Masala Design System v3.4.0",
        "brandUrl": "https://github.com/innovaccer/design-system/"
      },
      "docPage": {
        "customCode": "\n\n() => {\n   class CustomPopover extends React.Component {\n    constructor(props) {\n      super(props);\n      const { startDate, endDate } = DateRangePicker.utils.getCurrentWeek();\n\n      this.state = {\n        startDate,\n        endDate,\n        selected: 'currWeek',\n        monthNav: DateRangePicker.utils.getCurrentMonth(),\n      };\n\n      this.renderChildren = this.renderChildren.bind(this);\n      this.setDate = this.setDate.bind(this);\n      this.onReset = this.onReset.bind(this);\n    }\n\n    setDate(date) {\n      const d = new Date();\n      return new Date(d.setDate(date));\n    }\n\n    onReset() {\n      this.setState({\n        startDate:null,\n        endDate:null,\n        selected: \"\",\n        monthNav: DateRangePicker.utils.getCurrentMonth()\n      });\n    }\n\n    renderChildren() {\n      const { startDate, endDate, selected } = this.state;\n\n      return (\n        <div className=\"pt-6 px-5\">\n          <div className=\"d-flex align-items-center justify-content-between\">\n           <Subheading size=\"s\" className=\"py-3\" appearance=\"subtle\">Range</Subheading>\n            <Icon name=\"refresh\" onClick={this.onReset} />\n          </div>\n          <div className=\"pt-5\">\n            <Chip\n              label=\"This week\"\n              clearButton={false}\n              type=\"selection\"\n              className=\"mb-5 d-block\"\n              selected={selected === \"currWeek\"}\n              name=\"rangePicker\"\n              onClick={() => {\n                this.setState({\n                  selected: \"currWeek\",\n                  monthNav: DateRangePicker.utils.getCurrentMonth(),\n                  ...DateRangePicker.utils.getCurrentWeek()\n                });\n              }}\n            />\n            <Chip\n              label=\"Last week\"\n              clearButton={false}\n              type=\"selection\"\n              className=\"mb-5 d-block\"\n              selected={selected === 'prevWeek'}\n              name={\"chip\"}\n              onClick={() => {\n                this.setState({\n                  selected: \"prevWeek\",\n                  monthNav: DateRangePicker.utils.getCurrentMonth(),\n                  ...DateRangePicker.utils.getPreviousWeek()\n                });\n              }}\n            />\n            <Chip\n              label=\"Last month\"\n              clearButton={false}\n              type=\"selection\"\n              className=\"mb-5  d-block\"\n              selected={selected === 'prevMonth'}\n              name=\"rangePicker\"\n              onClick={() => {\n                this.setState({\n                  selected: \"prevMonth\",\n                  monthNav: DateRangePicker.utils.getCurrentMonth() - 1,\n                  ...DateRangePicker.utils.getPreviousMonth()\n                });\n              }}\n            />\n            <Chip\n              label=\"Last 90 days\"\n              clearButton={false}\n              type=\"selection\"\n              className=\"mb-5  d-block\"\n              selected={selected === 'prev90Days'}\n              name=\"rangePicker\"\n              onClick={() => {\n                this.setState({\n                  selected: \"prev90Days\",\n                  monthNav: DateRangePicker.utils.getCurrentMonth(),\n                  ...DateRangePicker.utils.getPrevious90Days()\n                });\n              }}\n            />\n             <Chip\n              label=\"Custom\"\n              clearButton={false}\n              type=\"selection\"\n              className=\"mb-5  d-block\"\n              selected={selected === 'custom'}\n              name=\"rangePicker\"\n              onClick={() => {\n                this.setState({\n                  selected: \"custom\",\n                  monthNav: DateRangePicker.utils.getCurrentMonth(),\n                  ...DateRangePicker.utils.getCustomDates()\n                });\n              }}\n            />\n          </div>\n        </div>\n      );\n    };\n\n    render() {\n      const { startDate, endDate, monthNav } = this.state;\n\n      return (\n        <div className=\"w-25\">\n          <DateRangePicker\n            withInput={true}\n            singleInput={true}\n            startDate={startDate}\n            endDate={endDate}\n            onRangeChange={(sDate, eDate, sValue, eValue) => {\n              console.log(sDate, eDate);\n            }}\n            monthsInView={1}\n            monthNav={monthNav}\n          >\n            {this.renderChildren()}\n            <Divider vertical={true} />\n          </DateRangePicker>\n        </div>\n      )\n    }\n  }\n\n  return <CustomPopover />\n}",
        "title": "Date range picker with custom Popover",
        "noProps": true
      }
    },
    "framework": "react",
    "backgrounds": {
      "grid": {
        "cellSize": 20,
        "opacity": 0.5,
        "cellAmount": 5
      },
      "values": [
        {
          "name": "light",
          "value": "#F8F8F8"
        },
        {
          "name": "dark",
          "value": "#333333"
        }
      ]
    },
    "viewMode": "docs",
    "actions": {
      "argTypesRegex": "^on[A-Z].*"
    },
    "a11y": {
      "element": "#root",
      "manual": false
    },
    "viewport": {
      "viewports": {
        "iphone5": {
          "name": "iPhone 5",
          "styles": {
            "height": "568px",
            "width": "320px"
          },
          "type": "mobile"
        },
        "iphone6": {
          "name": "iPhone 6",
          "styles": {
            "height": "667px",
            "width": "375px"
          },
          "type": "mobile"
        },
        "iphone6p": {
          "name": "iPhone 6 Plus",
          "styles": {
            "height": "736px",
            "width": "414px"
          },
          "type": "mobile"
        },
        "iphone8p": {
          "name": "iPhone 8 Plus",
          "styles": {
            "height": "736px",
            "width": "414px"
          },
          "type": "mobile"
        },
        "iphonex": {
          "name": "iPhone X",
          "styles": {
            "height": "812px",
            "width": "375px"
          },
          "type": "mobile"
        },
        "iphonexr": {
          "name": "iPhone XR",
          "styles": {
            "height": "896px",
            "width": "414px"
          },
          "type": "mobile"
        },
        "iphonexsmax": {
          "name": "iPhone XS Max",
          "styles": {
            "height": "896px",
            "width": "414px"
          },
          "type": "mobile"
        },
        "iphonese2": {
          "name": "iPhone SE (2nd generation)",
          "styles": {
            "height": "667px",
            "width": "375px"
          },
          "type": "mobile"
        },
        "iphone12mini": {
          "name": "iPhone 12 mini",
          "styles": {
            "height": "812px",
            "width": "375px"
          },
          "type": "mobile"
        },
        "iphone12": {
          "name": "iPhone 12",
          "styles": {
            "height": "844px",
            "width": "390px"
          },
          "type": "mobile"
        },
        "iphone12promax": {
          "name": "iPhone 12 Pro Max",
          "styles": {
            "height": "926px",
            "width": "428px"
          },
          "type": "mobile"
        },
        "ipad": {
          "name": "iPad",
          "styles": {
            "height": "1024px",
            "width": "768px"
          },
          "type": "tablet"
        },
        "ipad10p": {
          "name": "iPad Pro 10.5-in",
          "styles": {
            "height": "1112px",
            "width": "834px"
          },
          "type": "tablet"
        },
        "ipad12p": {
          "name": "iPad Pro 12.9-in",
          "styles": {
            "height": "1366px",
            "width": "1024px"
          },
          "type": "tablet"
        },
        "galaxys5": {
          "name": "Galaxy S5",
          "styles": {
            "height": "640px",
            "width": "360px"
          },
          "type": "mobile"
        },
        "galaxys9": {
          "name": "Galaxy S9",
          "styles": {
            "height": "740px",
            "width": "360px"
          },
          "type": "mobile"
        },
        "nexus5x": {
          "name": "Nexus 5X",
          "styles": {
            "height": "660px",
            "width": "412px"
          },
          "type": "mobile"
        },
        "nexus6p": {
          "name": "Nexus 6P",
          "styles": {
            "height": "732px",
            "width": "412px"
          },
          "type": "mobile"
        },
        "pixel": {
          "name": "Pixel",
          "styles": {
            "height": "960px",
            "width": "540px"
          },
          "type": "mobile"
        },
        "pixelxl": {
          "name": "Pixel XL",
          "styles": {
            "height": "1280px",
            "width": "720px"
          },
          "type": "mobile"
        }
      }
    },
    "controls": {
      "expanded": true
    },
    "options": {},
    "fileName": "./core/components/patterns/dateRangePicker/withCustomPopover.story.tsx",
    "storySource": {
      "source": "() => <></>"
    },
    "__isArgsStory": false,
    "__id": "patterns-daterangepicker-with-custom-popover--with-custom-popover",
    "globals": {
      "measureEnabled": false,
      "outline": false
    },
    "args": {},
    "argTypes": {
      "size": {
        "name": "size",
        "description": "Size of `Calendar`",
        "type": {
          "required": true,
          "name": "enum",
          "value": [
            "large",
            "small"
          ]
        },
        "table": {
          "type": {
            "summary": "\"large\" | \"small\""
          },
          "defaultValue": {
            "summary": "\"large\""
          }
        }
      },
      "monthsInView": {
        "name": "monthsInView",
        "description": "Number of months rendered in view\nNumber of months rendered in view\n\n**Default set to `2` when `withInput: true`**",
        "type": {
          "required": false,
          "name": "number"
        },
        "table": {
          "type": {
            "summary": "number"
          },
          "defaultValue": null
        }
      },
      "jumpView": {
        "name": "jumpView",
        "description": "Enables jumping to different view on clicking on Calendar Header\n\n**set to `false` if monthsInView > 1**",
        "type": {
          "required": false,
          "name": "other",
          "value": "boolean | undefined"
        },
        "table": {
          "type": {
            "summary": "boolean | undefined"
          },
          "defaultValue": {
            "summary": "true"
          }
        }
      },
      "firstDayOfWeek": {
        "name": "firstDayOfWeek",
        "description": "Specifies first day of week to be rendered",
        "type": {
          "required": true,
          "name": "enum",
          "value": [
            "sunday",
            "monday",
            "tuesday",
            "wednesday",
            "thursday",
            "friday",
            "saturday"
          ]
        },
        "table": {
          "type": {
            "summary": "\"sunday\" | \"monday\" | \"tuesday\" | \"wednesday\" | \"thursday\" | \"friday\" | \"saturday\""
          },
          "defaultValue": {
            "summary": "\"sunday\""
          }
        }
      },
      "view": {
        "name": "view",
        "description": "Specifies initial view of `Calendar`",
        "type": {
          "required": true,
          "name": "enum",
          "value": [
            "date",
            "month",
            "year"
          ]
        },
        "table": {
          "type": {
            "summary": "\"date\" | \"month\" | \"year\""
          },
          "defaultValue": {
            "summary": "\"date\""
          }
        }
      },
      "disabledBefore": {
        "name": "disabledBefore",
        "description": "Dates to be disabled before mentioned date",
        "type": {
          "required": false,
          "name": "other",
          "value": "Date | undefined"
        },
        "table": {
          "type": {
            "summary": "Date | undefined"
          },
          "defaultValue": null
        }
      },
      "disabledAfter": {
        "name": "disabledAfter",
        "description": "Dates to be disabled after mentioned date",
        "type": {
          "required": false,
          "name": "other",
          "value": "Date | undefined"
        },
        "table": {
          "type": {
            "summary": "Date | undefined"
          },
          "defaultValue": null
        }
      },
      "yearNav": {
        "name": "yearNav",
        "description": "Initial year to be set for navigation\n\n**use only if date, startDate and endDate are all set or undefined**",
        "type": {
          "required": false,
          "name": "other",
          "value": "number | undefined"
        },
        "table": {
          "type": {
            "summary": "number | undefined"
          },
          "defaultValue": null
        }
      },
      "monthNav": {
        "name": "monthNav",
        "description": "Initial month to be set for navigation\n\n**0 indexed(0-11)**\n\n**use only if date, startDate and endDate are all set or undefined**",
        "type": {
          "required": false,
          "name": "other",
          "value": "number | undefined"
        },
        "table": {
          "type": {
            "summary": "number | undefined"
          },
          "defaultValue": null
        }
      },
      "allowReverseSelection": {
        "name": "allowReverseSelection",
        "description": "Should be use to allow reverse selection in the daterangepicker",
        "type": {
          "required": false,
          "name": "other",
          "value": "boolean | undefined"
        },
        "table": {
          "type": {
            "summary": "boolean | undefined"
          },
          "defaultValue": null
        }
      },
      "className": {
        "name": "className",
        "description": "Adds custom class",
        "type": {
          "required": false,
          "name": "other",
          "value": "string | undefined"
        },
        "table": {
          "type": {
            "summary": "string | undefined"
          },
          "defaultValue": null
        }
      },
      "data-test": {
        "name": "data-test",
        "description": "Stores custom testing data private to the component.",
        "type": {
          "required": false,
          "name": "other",
          "value": "string | undefined"
        },
        "table": {
          "type": {
            "summary": "string | undefined"
          },
          "defaultValue": null
        }
      },
      "onRangeChange": {
        "name": "onRangeChange",
        "description": "",
        "type": {
          "required": false,
          "name": "function",
          "value": "((startDate?: Date | undefined, endDate?: Date | undefined, startValue?: string | undefined, endValue?: string | undefined) => void) | undefined"
        },
        "table": {
          "type": {
            "summary": "((startDate?: Date | undefined, endDate?: Date | undefined, startValue?: string | undefined, endValue?: string | undefined) => void) | undefined"
          },
          "defaultValue": null
        }
      },
      "children": {
        "name": "children",
        "description": "Element to be rendered inside Popover",
        "type": {
          "required": false,
          "name": "other",
          "value": "ReactNode"
        },
        "table": {
          "type": {
            "summary": "ReactNode"
          },
          "defaultValue": {
            "summary": "<></>"
          }
        }
      },
      "contentAlign": {
        "name": "contentAlign",
        "description": "Alignment of `children` Element",
        "type": {
          "required": false,
          "name": "enum",
          "value": [
            "undefined",
            "right",
            "left"
          ]
        },
        "table": {
          "type": {
            "summary": "undefined | \"right\" | \"left\""
          },
          "defaultValue": {
            "summary": "left"
          }
        }
      },
      "startDate": {
        "name": "startDate",
        "description": "Start date of `DateRangePicker`",
        "type": {
          "required": false,
          "name": "other",
          "value": "string | number | Date | undefined"
        },
        "table": {
          "type": {
            "summary": "string | number | Date | undefined"
          },
          "defaultValue": null
        }
      },
      "endDate": {
        "name": "endDate",
        "description": "End date of `DateRangePicker`",
        "type": {
          "required": false,
          "name": "other",
          "value": "string | number | Date | undefined"
        },
        "table": {
          "type": {
            "summary": "string | number | Date | undefined"
          },
          "defaultValue": null
        }
      },
      "rangeLimit": {
        "name": "rangeLimit",
        "description": "Allowed limit for difference in startDate and endDate\n\n**set `0` or `undefined` for infinite limit**",
        "type": {
          "required": false,
          "name": "other",
          "value": "number | undefined"
        },
        "table": {
          "type": {
            "summary": "number | undefined"
          },
          "defaultValue": null
        }
      },
      "withInput": {
        "name": "withInput",
        "description": "Set if `InputMask` should be used as trigger",
        "type": {
          "required": false,
          "name": "other",
          "value": "boolean | undefined"
        },
        "table": {
          "type": {
            "summary": "boolean | undefined"
          },
          "defaultValue": null
        }
      },
      "singleInput": {
        "name": "singleInput",
        "description": "Set if single `InputMask` should be used as trigger",
        "type": {
          "required": false,
          "name": "other",
          "value": "boolean | undefined"
        },
        "table": {
          "type": {
            "summary": "boolean | undefined"
          },
          "defaultValue": null
        }
      },
      "open": {
        "name": "open",
        "description": "Sets open state of `Popover`",
        "type": {
          "required": false,
          "name": "other",
          "value": "boolean | undefined"
        },
        "table": {
          "type": {
            "summary": "boolean | undefined"
          },
          "defaultValue": null
        }
      },
      "position": {
        "name": "position",
        "description": "Position of `DateRangePicker` w.r.t. `InputMask`",
        "type": {
          "required": false,
          "name": "enum",
          "value": [
            "bottom",
            "top-start",
            "top",
            "top-end",
            "right",
            "bottom-end",
            "bottom-start",
            "left",
            "auto-start",
            "auto",
            "auto-end",
            "right-start",
            "right-end",
            "left-end",
            "left-start"
          ]
        },
        "table": {
          "type": {
            "summary": "\"bottom\" | \"top-start\" | \"top\" | \"top-end\" | \"right\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"auto-start\" | \"auto\" | \"auto-end\" | \"right-start\" | \"right-end\" | \"left-end\" | \"left-start\""
          },
          "defaultValue": {
            "summary": "\"bottom-start\""
          }
        }
      },
      "inputFormat": {
        "name": "inputFormat",
        "description": "Should be used if `date` is of type `string`",
        "type": {
          "required": false,
          "name": "enum",
          "value": [
            "mm/dd/yyyy",
            "dd/mm/yyyy",
            "yyyy/mm/dd",
            "mm-dd-yyyy",
            "dd-mm-yyyy",
            "yyyy-mm-dd"
          ]
        },
        "table": {
          "type": {
            "summary": "\"mm/dd/yyyy\" | \"dd/mm/yyyy\" | \"yyyy/mm/dd\" | \"mm-dd-yyyy\" | \"dd-mm-yyyy\" | \"yyyy-mm-dd\""
          },
          "defaultValue": {
            "summary": "\"mm/dd/yyyy\""
          }
        }
      },
      "outputFormat": {
        "name": "outputFormat",
        "description": "Should be used to translate `date` to desired format for `onRangeChange` callback",
        "type": {
          "required": false,
          "name": "enum",
          "value": [
            "mm/dd/yyyy",
            "dd/mm/yyyy",
            "yyyy/mm/dd",
            "mm-dd-yyyy",
            "dd-mm-yyyy",
            "yyyy-mm-dd"
          ]
        },
        "table": {
          "type": {
            "summary": "\"mm/dd/yyyy\" | \"dd/mm/yyyy\" | \"yyyy/mm/dd\" | \"mm-dd-yyyy\" | \"dd-mm-yyyy\" | \"yyyy-mm-dd\""
          },
          "defaultValue": {
            "summary": "\"mm/dd/yyyy\""
          }
        }
      },
      "inputOptions": {
        "name": "inputOptions",
        "description": "Props to be used for date of `InputMask`\n\n**Valid in case of single input**.",
        "type": {
          "required": false,
          "name": "other",
          "value": "InputOptions"
        },
        "table": {
          "type": {
            "summary": "InputOptions"
          },
          "defaultValue": {
            "summary": "{ label: 'Date' }"
          }
        }
      },
      "startInputOptions": {
        "name": "startInputOptions",
        "description": "Props to be used for Start date `InputMask`",
        "type": {
          "required": false,
          "name": "other",
          "value": "InputOptions"
        },
        "table": {
          "type": {
            "summary": "InputOptions"
          },
          "defaultValue": {
            "summary": "{ label: 'Start Date' }"
          }
        }
      },
      "endInputOptions": {
        "name": "endInputOptions",
        "description": "Props to be used for End date `InputMask`",
        "type": {
          "required": false,
          "name": "other",
          "value": "InputOptions"
        },
        "table": {
          "type": {
            "summary": "InputOptions"
          },
          "defaultValue": {
            "summary": "{ label: 'End Date' }"
          }
        }
      },
      "validators": {
        "name": "validators",
        "description": "custom Validator for `DateRangePicker`\n\n`ValidatorFn: (val: string, format: string) => boolean`",
        "type": {
          "required": false,
          "name": "other",
          "value": "SingleOrArray<ValidatorFn<any[]>>"
        },
        "table": {
          "type": {
            "summary": "SingleOrArray<ValidatorFn<any[]>>"
          },
          "defaultValue": {
            "summary": "[Utils.validators.date]"
          }
        }
      }
    }
  },
  "initialArgs": {},
  "argTypes": {
    "size": {
      "name": "size",
      "description": "Size of `Calendar`",
      "type": {
        "required": true,
        "name": "enum",
        "value": [
          "large",
          "small"
        ]
      },
      "table": {
        "type": {
          "summary": "\"large\" | \"small\""
        },
        "defaultValue": {
          "summary": "\"large\""
        }
      }
    },
    "monthsInView": {
      "name": "monthsInView",
      "description": "Number of months rendered in view\nNumber of months rendered in view\n\n**Default set to `2` when `withInput: true`**",
      "type": {
        "required": false,
        "name": "number"
      },
      "table": {
        "type": {
          "summary": "number"
        },
        "defaultValue": null
      }
    },
    "jumpView": {
      "name": "jumpView",
      "description": "Enables jumping to different view on clicking on Calendar Header\n\n**set to `false` if monthsInView > 1**",
      "type": {
        "required": false,
        "name": "other",
        "value": "boolean | undefined"
      },
      "table": {
        "type": {
          "summary": "boolean | undefined"
        },
        "defaultValue": {
          "summary": "true"
        }
      }
    },
    "firstDayOfWeek": {
      "name": "firstDayOfWeek",
      "description": "Specifies first day of week to be rendered",
      "type": {
        "required": true,
        "name": "enum",
        "value": [
          "sunday",
          "monday",
          "tuesday",
          "wednesday",
          "thursday",
          "friday",
          "saturday"
        ]
      },
      "table": {
        "type": {
          "summary": "\"sunday\" | \"monday\" | \"tuesday\" | \"wednesday\" | \"thursday\" | \"friday\" | \"saturday\""
        },
        "defaultValue": {
          "summary": "\"sunday\""
        }
      }
    },
    "view": {
      "name": "view",
      "description": "Specifies initial view of `Calendar`",
      "type": {
        "required": true,
        "name": "enum",
        "value": [
          "date",
          "month",
          "year"
        ]
      },
      "table": {
        "type": {
          "summary": "\"date\" | \"month\" | \"year\""
        },
        "defaultValue": {
          "summary": "\"date\""
        }
      }
    },
    "disabledBefore": {
      "name": "disabledBefore",
      "description": "Dates to be disabled before mentioned date",
      "type": {
        "required": false,
        "name": "other",
        "value": "Date | undefined"
      },
      "table": {
        "type": {
          "summary": "Date | undefined"
        },
        "defaultValue": null
      }
    },
    "disabledAfter": {
      "name": "disabledAfter",
      "description": "Dates to be disabled after mentioned date",
      "type": {
        "required": false,
        "name": "other",
        "value": "Date | undefined"
      },
      "table": {
        "type": {
          "summary": "Date | undefined"
        },
        "defaultValue": null
      }
    },
    "yearNav": {
      "name": "yearNav",
      "description": "Initial year to be set for navigation\n\n**use only if date, startDate and endDate are all set or undefined**",
      "type": {
        "required": false,
        "name": "other",
        "value": "number | undefined"
      },
      "table": {
        "type": {
          "summary": "number | undefined"
        },
        "defaultValue": null
      }
    },
    "monthNav": {
      "name": "monthNav",
      "description": "Initial month to be set for navigation\n\n**0 indexed(0-11)**\n\n**use only if date, startDate and endDate are all set or undefined**",
      "type": {
        "required": false,
        "name": "other",
        "value": "number | undefined"
      },
      "table": {
        "type": {
          "summary": "number | undefined"
        },
        "defaultValue": null
      }
    },
    "allowReverseSelection": {
      "name": "allowReverseSelection",
      "description": "Should be use to allow reverse selection in the daterangepicker",
      "type": {
        "required": false,
        "name": "other",
        "value": "boolean | undefined"
      },
      "table": {
        "type": {
          "summary": "boolean | undefined"
        },
        "defaultValue": null
      }
    },
    "className": {
      "name": "className",
      "description": "Adds custom class",
      "type": {
        "required": false,
        "name": "other",
        "value": "string | undefined"
      },
      "table": {
        "type": {
          "summary": "string | undefined"
        },
        "defaultValue": null
      }
    },
    "data-test": {
      "name": "data-test",
      "description": "Stores custom testing data private to the component.",
      "type": {
        "required": false,
        "name": "other",
        "value": "string | undefined"
      },
      "table": {
        "type": {
          "summary": "string | undefined"
        },
        "defaultValue": null
      }
    },
    "onRangeChange": {
      "name": "onRangeChange",
      "description": "",
      "type": {
        "required": false,
        "name": "function",
        "value": "((startDate?: Date | undefined, endDate?: Date | undefined, startValue?: string | undefined, endValue?: string | undefined) => void) | undefined"
      },
      "table": {
        "type": {
          "summary": "((startDate?: Date | undefined, endDate?: Date | undefined, startValue?: string | undefined, endValue?: string | undefined) => void) | undefined"
        },
        "defaultValue": null
      }
    },
    "children": {
      "name": "children",
      "description": "Element to be rendered inside Popover",
      "type": {
        "required": false,
        "name": "other",
        "value": "ReactNode"
      },
      "table": {
        "type": {
          "summary": "ReactNode"
        },
        "defaultValue": {
          "summary": "<></>"
        }
      }
    },
    "contentAlign": {
      "name": "contentAlign",
      "description": "Alignment of `children` Element",
      "type": {
        "required": false,
        "name": "enum",
        "value": [
          "undefined",
          "right",
          "left"
        ]
      },
      "table": {
        "type": {
          "summary": "undefined | \"right\" | \"left\""
        },
        "defaultValue": {
          "summary": "left"
        }
      }
    },
    "startDate": {
      "name": "startDate",
      "description": "Start date of `DateRangePicker`",
      "type": {
        "required": false,
        "name": "other",
        "value": "string | number | Date | undefined"
      },
      "table": {
        "type": {
          "summary": "string | number | Date | undefined"
        },
        "defaultValue": null
      }
    },
    "endDate": {
      "name": "endDate",
      "description": "End date of `DateRangePicker`",
      "type": {
        "required": false,
        "name": "other",
        "value": "string | number | Date | undefined"
      },
      "table": {
        "type": {
          "summary": "string | number | Date | undefined"
        },
        "defaultValue": null
      }
    },
    "rangeLimit": {
      "name": "rangeLimit",
      "description": "Allowed limit for difference in startDate and endDate\n\n**set `0` or `undefined` for infinite limit**",
      "type": {
        "required": false,
        "name": "other",
        "value": "number | undefined"
      },
      "table": {
        "type": {
          "summary": "number | undefined"
        },
        "defaultValue": null
      }
    },
    "withInput": {
      "name": "withInput",
      "description": "Set if `InputMask` should be used as trigger",
      "type": {
        "required": false,
        "name": "other",
        "value": "boolean | undefined"
      },
      "table": {
        "type": {
          "summary": "boolean | undefined"
        },
        "defaultValue": null
      }
    },
    "singleInput": {
      "name": "singleInput",
      "description": "Set if single `InputMask` should be used as trigger",
      "type": {
        "required": false,
        "name": "other",
        "value": "boolean | undefined"
      },
      "table": {
        "type": {
          "summary": "boolean | undefined"
        },
        "defaultValue": null
      }
    },
    "open": {
      "name": "open",
      "description": "Sets open state of `Popover`",
      "type": {
        "required": false,
        "name": "other",
        "value": "boolean | undefined"
      },
      "table": {
        "type": {
          "summary": "boolean | undefined"
        },
        "defaultValue": null
      }
    },
    "position": {
      "name": "position",
      "description": "Position of `DateRangePicker` w.r.t. `InputMask`",
      "type": {
        "required": false,
        "name": "enum",
        "value": [
          "bottom",
          "top-start",
          "top",
          "top-end",
          "right",
          "bottom-end",
          "bottom-start",
          "left",
          "auto-start",
          "auto",
          "auto-end",
          "right-start",
          "right-end",
          "left-end",
          "left-start"
        ]
      },
      "table": {
        "type": {
          "summary": "\"bottom\" | \"top-start\" | \"top\" | \"top-end\" | \"right\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"auto-start\" | \"auto\" | \"auto-end\" | \"right-start\" | \"right-end\" | \"left-end\" | \"left-start\""
        },
        "defaultValue": {
          "summary": "\"bottom-start\""
        }
      }
    },
    "inputFormat": {
      "name": "inputFormat",
      "description": "Should be used if `date` is of type `string`",
      "type": {
        "required": false,
        "name": "enum",
        "value": [
          "mm/dd/yyyy",
          "dd/mm/yyyy",
          "yyyy/mm/dd",
          "mm-dd-yyyy",
          "dd-mm-yyyy",
          "yyyy-mm-dd"
        ]
      },
      "table": {
        "type": {
          "summary": "\"mm/dd/yyyy\" | \"dd/mm/yyyy\" | \"yyyy/mm/dd\" | \"mm-dd-yyyy\" | \"dd-mm-yyyy\" | \"yyyy-mm-dd\""
        },
        "defaultValue": {
          "summary": "\"mm/dd/yyyy\""
        }
      }
    },
    "outputFormat": {
      "name": "outputFormat",
      "description": "Should be used to translate `date` to desired format for `onRangeChange` callback",
      "type": {
        "required": false,
        "name": "enum",
        "value": [
          "mm/dd/yyyy",
          "dd/mm/yyyy",
          "yyyy/mm/dd",
          "mm-dd-yyyy",
          "dd-mm-yyyy",
          "yyyy-mm-dd"
        ]
      },
      "table": {
        "type": {
          "summary": "\"mm/dd/yyyy\" | \"dd/mm/yyyy\" | \"yyyy/mm/dd\" | \"mm-dd-yyyy\" | \"dd-mm-yyyy\" | \"yyyy-mm-dd\""
        },
        "defaultValue": {
          "summary": "\"mm/dd/yyyy\""
        }
      }
    },
    "inputOptions": {
      "name": "inputOptions",
      "description": "Props to be used for date of `InputMask`\n\n**Valid in case of single input**.",
      "type": {
        "required": false,
        "name": "other",
        "value": "InputOptions"
      },
      "table": {
        "type": {
          "summary": "InputOptions"
        },
        "defaultValue": {
          "summary": "{ label: 'Date' }"
        }
      }
    },
    "startInputOptions": {
      "name": "startInputOptions",
      "description": "Props to be used for Start date `InputMask`",
      "type": {
        "required": false,
        "name": "other",
        "value": "InputOptions"
      },
      "table": {
        "type": {
          "summary": "InputOptions"
        },
        "defaultValue": {
          "summary": "{ label: 'Start Date' }"
        }
      }
    },
    "endInputOptions": {
      "name": "endInputOptions",
      "description": "Props to be used for End date `InputMask`",
      "type": {
        "required": false,
        "name": "other",
        "value": "InputOptions"
      },
      "table": {
        "type": {
          "summary": "InputOptions"
        },
        "defaultValue": {
          "summary": "{ label: 'End Date' }"
        }
      }
    },
    "validators": {
      "name": "validators",
      "description": "custom Validator for `DateRangePicker`\n\n`ValidatorFn: (val: string, format: string) => boolean`",
      "type": {
        "required": false,
        "name": "other",
        "value": "SingleOrArray<ValidatorFn<any[]>>"
      },
      "table": {
        "type": {
          "summary": "SingleOrArray<ValidatorFn<any[]>>"
        },
        "defaultValue": {
          "summary": "[Utils.validators.date]"
        }
      }
    }
  }
}