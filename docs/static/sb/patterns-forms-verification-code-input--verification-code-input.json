{
  "args": {},
  "componentId": "patterns-forms-verification-code-input",
  "title": "Patterns/Forms/Verification Code Input",
  "kind": "Patterns/Forms/Verification Code Input",
  "id": "patterns-forms-verification-code-input--verification-code-input",
  "name": "Verification Code Input",
  "story": "Verification Code Input",
  "parameters": {
    "docs": {
      "inlineStories": true,
      "theme": {
        "base": "light",
        "colorPrimary": "#0000001a",
        "colorSecondary": "deepskyblue",
        "appBg": "white",
        "appContentBg": "white",
        "appBorderColor": "#0000001a",
        "appBorderRadius": 4,
        "fontBase": "\"Nunito Sans\", \"Open Sans\", sans-serif",
        "fontCode": "monospace",
        "textColor": "black",
        "textInverseColor": "rgba(255,255,255,0.9)",
        "textMutedColor": "#666666",
        "barTextColor": "silver",
        "barSelectedColor": "black",
        "barBg": "white",
        "inputBg": "white",
        "inputBorder": "silver",
        "inputTextColor": "black",
        "inputBorderRadius": 4,
        "brandTitle": "Masala Design System v3.4.0",
        "brandUrl": "https://github.com/innovaccer/design-system/"
      },
      "docPage": {
        "customCode": "() => {\n  class VerificationCodeInputCard extends React.Component {\n    constructor(props) {\n      super(props);\n\n      this.correctValue = '555123';\n      this.state = {\n        isTimerStarted: false,\n        timer: 30,\n        loading: false,\n        value: '',\n        error: false,\n      };\n\n      this.onToogleLink = this.onToogleLink.bind(this);\n      this.onCompleteHandler = this.onCompleteHandler.bind(this);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n      const { timer, isTimerStarted } = this.state;\n\n      if (isTimerStarted\n        && (timer !== prevState.time || prevState.isTimerStarted !== isTimerStarted)\n      ) {\n        if (timer > 0) {\n          setTimeout(() => {\n            this.setState({\n              timer: timer - 1,\n            })\n          }, 1000);\n        }\n\n        if (timer === 0) {\n          this.setState({\n            isTimerStarted: !isTimerStarted,\n          });\n        }\n      }\n    }\n\n    onToogleLink() {\n      if (this.state.loading || !!this.state.value) return;\n      this.setState({\n        isTimerStarted: true,\n        timer: 30\n      });\n    };\n\n    onCompleteHandler(value) {\n      this.setState({\n        loading: true,\n        timer: 0,\n        isTimerStarted: false,\n      });\n\n      setTimeout(() => {\n        this.setState({\n          value: value === this.correctValue ? value : '',\n          loading: false,\n          error: value !== this.correctValue\n        });\n      }, 2000);\n    };\n\n    render() {\n      const { isTimerStarted, timer, loading, value, error } = this.state;\n      const time = timer < 10 ? `0${timer}` : timer;\n\n      return (\n        <div>\n          <div className=\"mb-5\">\n            <Text weight=\"strong\">Note: </Text>\n            <Text weight=\"medium\">{`Verified value of Verification Code Input is ${this.correctValue} in this example.`}</Text>\n          </div>\n          <div className=\"w-50\">\n            {(value || error) && (\n              <Message\n                appearance={error ? 'alert' : 'success'}\n                description={error? 'The code that you have entered is invalid or incorrect. Try again.' : 'Verification Successful.'}\n                className=\"mb-5\"\n              />\n            )}\n            <Card className=\"py-6 px-6\">\n              <div className=\"d-flex flex-column\">\n                <Text weight=\"strong\" size=\"large\">Enter Verification Code</Text>\n                <Text className=\"mt-3\" appearance=\"subtle\">\n                  We have sent a 6 digit verification code to your phone (555) 555-1234\n                </Text>\n              </div>\n              <Label withInput={true} className=\"mt-7\">Verification code</Label>\n              <div className=\"d-flex align-items-center\">\n                <VerificationCodeInput\n                  fields={6}\n                  onComplete={this.onCompleteHandler}\n                  disabled={loading || !!value}\n                />\n                {loading && <Spinner className=\"ml-5\" size=\"medium\" />}\n              </div>\n              {isTimerStarted ? (\n                <Text className=\"mt-7 d-flex\" weight=\"medium\">\n                  {`Haven't recieved the code? Resend code in 0:${time}`}\n                </Text>\n              ) : (\n                  <Text\n                    className=\"mt-7 d-flex cursor-pointer\"\n                    appearance={loading || !!value ? 'disabled' : 'link'}\n                    weight=\"medium\"\n                    onClick={this.onToogleLink}\n                  >\n                    Resend Code\n                  </Text>\n                )}\n            </Card>\n          </div>\n        </div>\n      );\n    }\n  };\n\n  return <><VerificationCodeInputCard /></>\n}",
        "title": "Verification Code Input"
      }
    },
    "framework": "react",
    "backgrounds": {
      "grid": {
        "cellSize": 20,
        "opacity": 0.5,
        "cellAmount": 5
      },
      "values": [
        {
          "name": "light",
          "value": "#F8F8F8"
        },
        {
          "name": "dark",
          "value": "#333333"
        }
      ]
    },
    "viewMode": "docs",
    "actions": {
      "argTypesRegex": "^on[A-Z].*"
    },
    "a11y": {
      "element": "#root",
      "manual": false
    },
    "viewport": {
      "viewports": {
        "iphone5": {
          "name": "iPhone 5",
          "styles": {
            "height": "568px",
            "width": "320px"
          },
          "type": "mobile"
        },
        "iphone6": {
          "name": "iPhone 6",
          "styles": {
            "height": "667px",
            "width": "375px"
          },
          "type": "mobile"
        },
        "iphone6p": {
          "name": "iPhone 6 Plus",
          "styles": {
            "height": "736px",
            "width": "414px"
          },
          "type": "mobile"
        },
        "iphone8p": {
          "name": "iPhone 8 Plus",
          "styles": {
            "height": "736px",
            "width": "414px"
          },
          "type": "mobile"
        },
        "iphonex": {
          "name": "iPhone X",
          "styles": {
            "height": "812px",
            "width": "375px"
          },
          "type": "mobile"
        },
        "iphonexr": {
          "name": "iPhone XR",
          "styles": {
            "height": "896px",
            "width": "414px"
          },
          "type": "mobile"
        },
        "iphonexsmax": {
          "name": "iPhone XS Max",
          "styles": {
            "height": "896px",
            "width": "414px"
          },
          "type": "mobile"
        },
        "iphonese2": {
          "name": "iPhone SE (2nd generation)",
          "styles": {
            "height": "667px",
            "width": "375px"
          },
          "type": "mobile"
        },
        "iphone12mini": {
          "name": "iPhone 12 mini",
          "styles": {
            "height": "812px",
            "width": "375px"
          },
          "type": "mobile"
        },
        "iphone12": {
          "name": "iPhone 12",
          "styles": {
            "height": "844px",
            "width": "390px"
          },
          "type": "mobile"
        },
        "iphone12promax": {
          "name": "iPhone 12 Pro Max",
          "styles": {
            "height": "926px",
            "width": "428px"
          },
          "type": "mobile"
        },
        "ipad": {
          "name": "iPad",
          "styles": {
            "height": "1024px",
            "width": "768px"
          },
          "type": "tablet"
        },
        "ipad10p": {
          "name": "iPad Pro 10.5-in",
          "styles": {
            "height": "1112px",
            "width": "834px"
          },
          "type": "tablet"
        },
        "ipad12p": {
          "name": "iPad Pro 12.9-in",
          "styles": {
            "height": "1366px",
            "width": "1024px"
          },
          "type": "tablet"
        },
        "galaxys5": {
          "name": "Galaxy S5",
          "styles": {
            "height": "640px",
            "width": "360px"
          },
          "type": "mobile"
        },
        "galaxys9": {
          "name": "Galaxy S9",
          "styles": {
            "height": "740px",
            "width": "360px"
          },
          "type": "mobile"
        },
        "nexus5x": {
          "name": "Nexus 5X",
          "styles": {
            "height": "660px",
            "width": "412px"
          },
          "type": "mobile"
        },
        "nexus6p": {
          "name": "Nexus 6P",
          "styles": {
            "height": "732px",
            "width": "412px"
          },
          "type": "mobile"
        },
        "pixel": {
          "name": "Pixel",
          "styles": {
            "height": "960px",
            "width": "540px"
          },
          "type": "mobile"
        },
        "pixelxl": {
          "name": "Pixel XL",
          "styles": {
            "height": "1280px",
            "width": "720px"
          },
          "type": "mobile"
        }
      }
    },
    "controls": {
      "expanded": true
    },
    "options": {},
    "fileName": "./core/components/patterns/forms/VerificationCodeInput.story.tsx",
    "storySource": {
      "source": "() => <></>"
    },
    "__isArgsStory": false,
    "__id": "patterns-forms-verification-code-input--verification-code-input",
    "globals": {
      "measureEnabled": false,
      "outline": false
    },
    "args": {},
    "argTypes": {
      "fields": {
        "name": "fields",
        "description": "Number of input fields to be used to compose code input.",
        "type": {
          "required": false,
          "name": "other",
          "value": "number | undefined"
        },
        "table": {
          "type": {
            "summary": "number | undefined"
          },
          "defaultValue": {
            "summary": "4"
          }
        }
      },
      "type": {
        "name": "type",
        "description": "Type of values to be entered.",
        "type": {
          "required": false,
          "name": "enum",
          "value": [
            "undefined",
            "number",
            "text",
            "password"
          ]
        },
        "table": {
          "type": {
            "summary": "undefined | \"number\" | \"text\" | \"password\""
          },
          "defaultValue": {
            "summary": "number"
          }
        }
      },
      "onComplete": {
        "name": "onComplete",
        "description": "Callback triggered after all values are entered.",
        "type": {
          "required": false,
          "name": "function",
          "value": "((value: string) => void) | undefined"
        },
        "table": {
          "type": {
            "summary": "((value: string) => void) | undefined"
          },
          "defaultValue": null
        }
      },
      "onChange": {
        "name": "onChange",
        "description": "Callback triggered when input value is changed.",
        "type": {
          "required": false,
          "name": "function",
          "value": "((value: string) => void) | undefined"
        },
        "table": {
          "type": {
            "summary": "((value: string) => void) | undefined"
          },
          "defaultValue": null
        }
      },
      "className": {
        "name": "className",
        "description": "Adds custom class",
        "type": {
          "required": false,
          "name": "other",
          "value": "string | undefined"
        },
        "table": {
          "type": {
            "summary": "string | undefined"
          },
          "defaultValue": null
        }
      },
      "data-test": {
        "name": "data-test",
        "description": "Stores custom testing data private to the component.",
        "type": {
          "required": false,
          "name": "other",
          "value": "string | undefined"
        },
        "table": {
          "type": {
            "summary": "string | undefined"
          },
          "defaultValue": null
        }
      },
      "disabled": {
        "name": "disabled",
        "description": "Disables the `Input`, making it unable to type",
        "type": {
          "required": false,
          "name": "other",
          "value": "boolean | undefined"
        },
        "table": {
          "type": {
            "summary": "boolean | undefined"
          },
          "defaultValue": null
        }
      },
      "pattern": {
        "name": "pattern",
        "description": "The pattern attribute, when specified, is a regular expression that the input's value\nmust match in order for the value to pass constraint validation.",
        "type": {
          "required": false,
          "name": "other",
          "value": "string | undefined"
        },
        "table": {
          "type": {
            "summary": "string | undefined"
          },
          "defaultValue": null
        }
      },
      "placeholder": {
        "name": "placeholder",
        "description": "Text to display when input is empty.\nIncase a label is missing, a placeholder should be provided to make it accessible for all user.",
        "type": {
          "required": false,
          "name": "other",
          "value": "string | undefined"
        },
        "table": {
          "type": {
            "summary": "string | undefined"
          },
          "defaultValue": null
        }
      },
      "readOnly": {
        "name": "readOnly",
        "description": "Disables the `Input`, making it unable to type",
        "type": {
          "required": false,
          "name": "other",
          "value": "boolean | undefined"
        },
        "table": {
          "type": {
            "summary": "boolean | undefined"
          },
          "defaultValue": null
        }
      },
      "required": {
        "name": "required",
        "description": "Shows the user that this field id required",
        "type": {
          "required": false,
          "name": "other",
          "value": "boolean | undefined"
        },
        "table": {
          "type": {
            "summary": "boolean | undefined"
          },
          "defaultValue": null
        }
      },
      "value": {
        "name": "value",
        "description": "Value of the `Input` (Used in case of controlled `Input`)",
        "type": {
          "required": false,
          "name": "other",
          "value": "string | undefined"
        },
        "table": {
          "type": {
            "summary": "string | undefined"
          },
          "defaultValue": null
        }
      },
      "autoFocus": {
        "name": "autoFocus",
        "description": "Adds autoFocus",
        "type": {
          "required": false,
          "name": "other",
          "value": "boolean | undefined"
        },
        "table": {
          "type": {
            "summary": "boolean | undefined"
          },
          "defaultValue": null
        }
      },
      "onPaste": {
        "name": "onPaste",
        "description": "Handler to be called when paste event occur inside `Input`",
        "type": {
          "required": false,
          "name": "function",
          "value": "((event: ClipboardEvent<HTMLInputElement>) => void) | undefined"
        },
        "table": {
          "type": {
            "summary": "((event: ClipboardEvent<HTMLInputElement>) => void) | undefined"
          },
          "defaultValue": null
        }
      },
      "onFocus": {
        "name": "onFocus",
        "description": "Handler to be called when `Input` gets focus",
        "type": {
          "required": false,
          "name": "function",
          "value": "((e: FocusEvent<HTMLInputElement, Element>) => void) | undefined"
        },
        "table": {
          "type": {
            "summary": "((e: FocusEvent<HTMLInputElement, Element>) => void) | undefined"
          },
          "defaultValue": null
        }
      },
      "onBlur": {
        "name": "onBlur",
        "description": "Handler to be called when `Input` loses focus",
        "type": {
          "required": false,
          "name": "function",
          "value": "((e: FocusEvent<HTMLInputElement, Element>) => void) | undefined"
        },
        "table": {
          "type": {
            "summary": "((e: FocusEvent<HTMLInputElement, Element>) => void) | undefined"
          },
          "defaultValue": null
        }
      },
      "onClick": {
        "name": "onClick",
        "description": "Handler to be called when `Input` is clicked",
        "type": {
          "required": false,
          "name": "function",
          "value": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
        },
        "table": {
          "type": {
            "summary": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
          },
          "defaultValue": null
        }
      },
      "iconType": {
        "name": "iconType",
        "description": "Set type of Icon",
        "type": {
          "required": false,
          "name": "enum",
          "value": [
            "undefined",
            "rounded",
            "outlined"
          ]
        },
        "table": {
          "type": {
            "summary": "undefined | \"rounded\" | \"outlined\""
          },
          "defaultValue": null
        }
      },
      "error": {
        "name": "error",
        "description": "Shows error state in case of failed validation",
        "type": {
          "required": false,
          "name": "other",
          "value": "boolean | undefined"
        },
        "table": {
          "type": {
            "summary": "boolean | undefined"
          },
          "defaultValue": null
        }
      },
      "minWidth": {
        "name": "minWidth",
        "description": "minimum width of `Input` component\n\n**No default value for `type='number'`**",
        "type": {
          "required": false,
          "name": "other",
          "value": "string | undefined"
        },
        "table": {
          "type": {
            "summary": "string | undefined"
          },
          "defaultValue": null
        }
      }
    }
  },
  "initialArgs": {},
  "argTypes": {
    "fields": {
      "name": "fields",
      "description": "Number of input fields to be used to compose code input.",
      "type": {
        "required": false,
        "name": "other",
        "value": "number | undefined"
      },
      "table": {
        "type": {
          "summary": "number | undefined"
        },
        "defaultValue": {
          "summary": "4"
        }
      }
    },
    "type": {
      "name": "type",
      "description": "Type of values to be entered.",
      "type": {
        "required": false,
        "name": "enum",
        "value": [
          "undefined",
          "number",
          "text",
          "password"
        ]
      },
      "table": {
        "type": {
          "summary": "undefined | \"number\" | \"text\" | \"password\""
        },
        "defaultValue": {
          "summary": "number"
        }
      }
    },
    "onComplete": {
      "name": "onComplete",
      "description": "Callback triggered after all values are entered.",
      "type": {
        "required": false,
        "name": "function",
        "value": "((value: string) => void) | undefined"
      },
      "table": {
        "type": {
          "summary": "((value: string) => void) | undefined"
        },
        "defaultValue": null
      }
    },
    "onChange": {
      "name": "onChange",
      "description": "Callback triggered when input value is changed.",
      "type": {
        "required": false,
        "name": "function",
        "value": "((value: string) => void) | undefined"
      },
      "table": {
        "type": {
          "summary": "((value: string) => void) | undefined"
        },
        "defaultValue": null
      }
    },
    "className": {
      "name": "className",
      "description": "Adds custom class",
      "type": {
        "required": false,
        "name": "other",
        "value": "string | undefined"
      },
      "table": {
        "type": {
          "summary": "string | undefined"
        },
        "defaultValue": null
      }
    },
    "data-test": {
      "name": "data-test",
      "description": "Stores custom testing data private to the component.",
      "type": {
        "required": false,
        "name": "other",
        "value": "string | undefined"
      },
      "table": {
        "type": {
          "summary": "string | undefined"
        },
        "defaultValue": null
      }
    },
    "disabled": {
      "name": "disabled",
      "description": "Disables the `Input`, making it unable to type",
      "type": {
        "required": false,
        "name": "other",
        "value": "boolean | undefined"
      },
      "table": {
        "type": {
          "summary": "boolean | undefined"
        },
        "defaultValue": null
      }
    },
    "pattern": {
      "name": "pattern",
      "description": "The pattern attribute, when specified, is a regular expression that the input's value\nmust match in order for the value to pass constraint validation.",
      "type": {
        "required": false,
        "name": "other",
        "value": "string | undefined"
      },
      "table": {
        "type": {
          "summary": "string | undefined"
        },
        "defaultValue": null
      }
    },
    "placeholder": {
      "name": "placeholder",
      "description": "Text to display when input is empty.\nIncase a label is missing, a placeholder should be provided to make it accessible for all user.",
      "type": {
        "required": false,
        "name": "other",
        "value": "string | undefined"
      },
      "table": {
        "type": {
          "summary": "string | undefined"
        },
        "defaultValue": null
      }
    },
    "readOnly": {
      "name": "readOnly",
      "description": "Disables the `Input`, making it unable to type",
      "type": {
        "required": false,
        "name": "other",
        "value": "boolean | undefined"
      },
      "table": {
        "type": {
          "summary": "boolean | undefined"
        },
        "defaultValue": null
      }
    },
    "required": {
      "name": "required",
      "description": "Shows the user that this field id required",
      "type": {
        "required": false,
        "name": "other",
        "value": "boolean | undefined"
      },
      "table": {
        "type": {
          "summary": "boolean | undefined"
        },
        "defaultValue": null
      }
    },
    "value": {
      "name": "value",
      "description": "Value of the `Input` (Used in case of controlled `Input`)",
      "type": {
        "required": false,
        "name": "other",
        "value": "string | undefined"
      },
      "table": {
        "type": {
          "summary": "string | undefined"
        },
        "defaultValue": null
      }
    },
    "autoFocus": {
      "name": "autoFocus",
      "description": "Adds autoFocus",
      "type": {
        "required": false,
        "name": "other",
        "value": "boolean | undefined"
      },
      "table": {
        "type": {
          "summary": "boolean | undefined"
        },
        "defaultValue": null
      }
    },
    "onPaste": {
      "name": "onPaste",
      "description": "Handler to be called when paste event occur inside `Input`",
      "type": {
        "required": false,
        "name": "function",
        "value": "((event: ClipboardEvent<HTMLInputElement>) => void) | undefined"
      },
      "table": {
        "type": {
          "summary": "((event: ClipboardEvent<HTMLInputElement>) => void) | undefined"
        },
        "defaultValue": null
      }
    },
    "onFocus": {
      "name": "onFocus",
      "description": "Handler to be called when `Input` gets focus",
      "type": {
        "required": false,
        "name": "function",
        "value": "((e: FocusEvent<HTMLInputElement, Element>) => void) | undefined"
      },
      "table": {
        "type": {
          "summary": "((e: FocusEvent<HTMLInputElement, Element>) => void) | undefined"
        },
        "defaultValue": null
      }
    },
    "onBlur": {
      "name": "onBlur",
      "description": "Handler to be called when `Input` loses focus",
      "type": {
        "required": false,
        "name": "function",
        "value": "((e: FocusEvent<HTMLInputElement, Element>) => void) | undefined"
      },
      "table": {
        "type": {
          "summary": "((e: FocusEvent<HTMLInputElement, Element>) => void) | undefined"
        },
        "defaultValue": null
      }
    },
    "onClick": {
      "name": "onClick",
      "description": "Handler to be called when `Input` is clicked",
      "type": {
        "required": false,
        "name": "function",
        "value": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
      },
      "table": {
        "type": {
          "summary": "((e: MouseEvent<HTMLInputElement, MouseEvent>) => void) | undefined"
        },
        "defaultValue": null
      }
    },
    "iconType": {
      "name": "iconType",
      "description": "Set type of Icon",
      "type": {
        "required": false,
        "name": "enum",
        "value": [
          "undefined",
          "rounded",
          "outlined"
        ]
      },
      "table": {
        "type": {
          "summary": "undefined | \"rounded\" | \"outlined\""
        },
        "defaultValue": null
      }
    },
    "error": {
      "name": "error",
      "description": "Shows error state in case of failed validation",
      "type": {
        "required": false,
        "name": "other",
        "value": "boolean | undefined"
      },
      "table": {
        "type": {
          "summary": "boolean | undefined"
        },
        "defaultValue": null
      }
    },
    "minWidth": {
      "name": "minWidth",
      "description": "minimum width of `Input` component\n\n**No default value for `type='number'`**",
      "type": {
        "required": false,
        "name": "other",
        "value": "string | undefined"
      },
      "table": {
        "type": {
          "summary": "string | undefined"
        },
        "defaultValue": null
      }
    }
  }
}