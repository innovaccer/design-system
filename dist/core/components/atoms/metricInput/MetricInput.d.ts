import * as React from 'react';
import { BaseHtmlProps, BaseProps } from '@/utils/types';
import { AutoComplete, IconType } from '@/common.type';
export type MetricInputSize = 'small' | 'regular' | 'large';
export type MetricInputProps = {
    name?: string;
    value?: string | number;
    defaultValue?: string | number;
    placeholder?: string;
    size?: MetricInputSize;
    icon?: string;
    iconType?: IconType;
    prefix?: string;
    suffix?: string;
    disabled?: boolean;
    autoFocus?: boolean;
    autoComplete?: AutoComplete;
    readOnly?: boolean;
    min?: number;
    max?: number;
    error?: boolean;
    showActionButton?: boolean;
    onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;
    onClick?: (e: React.MouseEvent<HTMLInputElement>) => void;
    onBlur?: (e: React.FocusEvent<HTMLInputElement>) => void;
    onFocus?: (e: React.FocusEvent<HTMLInputElement>) => void;
    onKeyDown?: (e: React.KeyboardEvent<HTMLInputElement>) => void;
} & BaseProps & BaseHtmlProps<HTMLInputElement>;
export declare const MetricInput: React.ForwardRefExoticComponent<{
    name?: string;
    value?: string | number;
    defaultValue?: string | number;
    placeholder?: string;
    size?: MetricInputSize;
    icon?: string;
    iconType?: IconType;
    prefix?: string;
    suffix?: string;
    disabled?: boolean;
    autoFocus?: boolean;
    autoComplete?: AutoComplete;
    readOnly?: boolean;
    min?: number;
    max?: number;
    error?: boolean;
    showActionButton?: boolean;
    onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;
    onClick?: (e: React.MouseEvent<HTMLInputElement>) => void;
    onBlur?: (e: React.FocusEvent<HTMLInputElement>) => void;
    onFocus?: (e: React.FocusEvent<HTMLInputElement>) => void;
    onKeyDown?: (e: React.KeyboardEvent<HTMLInputElement>) => void;
} & BaseProps & BaseHtmlProps<HTMLInputElement> & React.RefAttributes<HTMLInputElement>>;
export default MetricInput;
